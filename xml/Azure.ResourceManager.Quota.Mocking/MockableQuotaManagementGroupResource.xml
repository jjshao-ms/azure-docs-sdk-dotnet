<Type Name="MockableQuotaManagementGroupResource" FullName="Azure.ResourceManager.Quota.Mocking.MockableQuotaManagementGroupResource">
  <TypeSignature Language="C#" Value="public class MockableQuotaManagementGroupResource : Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MockableQuotaManagementGroupResource extends Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.Quota.Mocking.MockableQuotaManagementGroupResource" />
  <TypeSignature Language="VB.NET" Value="Public Class MockableQuotaManagementGroupResource&#xA;Inherits ArmResource" />
  <TypeSignature Language="F#" Value="type MockableQuotaManagementGroupResource = class&#xA;    inherit ArmResource" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.Quota</AssemblyName>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.ResourceManager.ArmResource</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> A class to add extension methods to ManagementGroupResource. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MockableQuotaManagementGroupResource ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Quota.Mocking.MockableQuotaManagementGroupResource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Quota</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Quota.Mocking.MockableQuotaManagementGroupResource" /> class for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateOrUpdateGroupQuotaSubscriptionAllocationRequest">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Quota.QuotaAllocationRequestStatusResource&gt; CreateOrUpdateGroupQuotaSubscriptionAllocationRequest (Azure.WaitUntil waitUntil, string subscriptionId, string groupQuotaName, string resourceProviderName, string resourceName, Azure.ResourceManager.Quota.QuotaAllocationRequestStatusData data, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.Quota.QuotaAllocationRequestStatusResource&gt; CreateOrUpdateGroupQuotaSubscriptionAllocationRequest(valuetype Azure.WaitUntil waitUntil, string subscriptionId, string groupQuotaName, string resourceProviderName, string resourceName, class Azure.ResourceManager.Quota.QuotaAllocationRequestStatusData data, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Quota.Mocking.MockableQuotaManagementGroupResource.CreateOrUpdateGroupQuotaSubscriptionAllocationRequest(Azure.WaitUntil,System.String,System.String,System.String,System.String,Azure.ResourceManager.Quota.QuotaAllocationRequestStatusData,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateOrUpdateGroupQuotaSubscriptionAllocationRequest (waitUntil As WaitUntil, subscriptionId As String, groupQuotaName As String, resourceProviderName As String, resourceName As String, data As QuotaAllocationRequestStatusData, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation(Of QuotaAllocationRequestStatusResource)" />
      <MemberSignature Language="F#" Value="abstract member CreateOrUpdateGroupQuotaSubscriptionAllocationRequest : Azure.WaitUntil * string * string * string * string * Azure.ResourceManager.Quota.QuotaAllocationRequestStatusData * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Quota.QuotaAllocationRequestStatusResource&gt;&#xA;override this.CreateOrUpdateGroupQuotaSubscriptionAllocationRequest : Azure.WaitUntil * string * string * string * string * Azure.ResourceManager.Quota.QuotaAllocationRequestStatusData * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Quota.QuotaAllocationRequestStatusResource&gt;" Usage="mockableQuotaManagementGroupResource.CreateOrUpdateGroupQuotaSubscriptionAllocationRequest (waitUntil, subscriptionId, groupQuotaName, resourceProviderName, resourceName, data, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Quota</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Quota.QuotaAllocationRequestStatusResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="subscriptionId" Type="System.String" />
        <Parameter Name="groupQuotaName" Type="System.String" />
        <Parameter Name="resourceProviderName" Type="System.String" />
        <Parameter Name="resourceName" Type="System.String" />
        <Parameter Name="data" Type="Azure.ResourceManager.Quota.QuotaAllocationRequestStatusData" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        <param name="groupQuotaName"> The GroupQuota name. The name should be unique for the provided context tenantId/MgId. </param>
        <param name="resourceProviderName"> The resource provider name, such as - Microsoft.Compute. Currently only Microsoft.Compute resource provider supports this API. </param>
        <param name="resourceName"> Resource name. </param>
        <param name="data"> Quota requests payload. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Request to assign quota from group quota to a specific Subscription. The assign GroupQuota to subscriptions or reduce the quota allocated to subscription to give back the unused quota ( quota &gt;= usages) to the groupQuota. So, this API can be used to assign Quota to subscriptions and assign back unused quota to group quota, which can be assigned to another subscriptions in the GroupQuota.
            <list type="bullet"><item><term>Request Path</term><description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/subscriptions/{subscriptionId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/resourceProviders/{resourceProviderName}/quotaAllocationRequests/{resourceName}</description></item><item><term>Operation Id</term><description>GroupQuotaSubscriptionAllocationRequest_CreateOrUpdate</description></item><item><term>Default Api Version</term><description>2023-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Quota.QuotaAllocationRequestStatusResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="subscriptionId" />, <paramref name="groupQuotaName" />, <paramref name="resourceProviderName" /> or <paramref name="resourceName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="subscriptionId" />, <paramref name="groupQuotaName" />, <paramref name="resourceProviderName" />, <paramref name="resourceName" /> or <paramref name="data" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateOrUpdateGroupQuotaSubscriptionAllocationRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Quota.QuotaAllocationRequestStatusResource&gt;&gt; CreateOrUpdateGroupQuotaSubscriptionAllocationRequestAsync (Azure.WaitUntil waitUntil, string subscriptionId, string groupQuotaName, string resourceProviderName, string resourceName, Azure.ResourceManager.Quota.QuotaAllocationRequestStatusData data, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.Quota.QuotaAllocationRequestStatusResource&gt;&gt; CreateOrUpdateGroupQuotaSubscriptionAllocationRequestAsync(valuetype Azure.WaitUntil waitUntil, string subscriptionId, string groupQuotaName, string resourceProviderName, string resourceName, class Azure.ResourceManager.Quota.QuotaAllocationRequestStatusData data, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Quota.Mocking.MockableQuotaManagementGroupResource.CreateOrUpdateGroupQuotaSubscriptionAllocationRequestAsync(Azure.WaitUntil,System.String,System.String,System.String,System.String,Azure.ResourceManager.Quota.QuotaAllocationRequestStatusData,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateOrUpdateGroupQuotaSubscriptionAllocationRequestAsync (waitUntil As WaitUntil, subscriptionId As String, groupQuotaName As String, resourceProviderName As String, resourceName As String, data As QuotaAllocationRequestStatusData, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation(Of QuotaAllocationRequestStatusResource))" />
      <MemberSignature Language="F#" Value="abstract member CreateOrUpdateGroupQuotaSubscriptionAllocationRequestAsync : Azure.WaitUntil * string * string * string * string * Azure.ResourceManager.Quota.QuotaAllocationRequestStatusData * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Quota.QuotaAllocationRequestStatusResource&gt;&gt;&#xA;override this.CreateOrUpdateGroupQuotaSubscriptionAllocationRequestAsync : Azure.WaitUntil * string * string * string * string * Azure.ResourceManager.Quota.QuotaAllocationRequestStatusData * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Quota.QuotaAllocationRequestStatusResource&gt;&gt;" Usage="mockableQuotaManagementGroupResource.CreateOrUpdateGroupQuotaSubscriptionAllocationRequestAsync (waitUntil, subscriptionId, groupQuotaName, resourceProviderName, resourceName, data, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Quota</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Quota.QuotaAllocationRequestStatusResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="subscriptionId" Type="System.String" />
        <Parameter Name="groupQuotaName" Type="System.String" />
        <Parameter Name="resourceProviderName" Type="System.String" />
        <Parameter Name="resourceName" Type="System.String" />
        <Parameter Name="data" Type="Azure.ResourceManager.Quota.QuotaAllocationRequestStatusData" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        <param name="groupQuotaName"> The GroupQuota name. The name should be unique for the provided context tenantId/MgId. </param>
        <param name="resourceProviderName"> The resource provider name, such as - Microsoft.Compute. Currently only Microsoft.Compute resource provider supports this API. </param>
        <param name="resourceName"> Resource name. </param>
        <param name="data"> Quota requests payload. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Request to assign quota from group quota to a specific Subscription. The assign GroupQuota to subscriptions or reduce the quota allocated to subscription to give back the unused quota ( quota &gt;= usages) to the groupQuota. So, this API can be used to assign Quota to subscriptions and assign back unused quota to group quota, which can be assigned to another subscriptions in the GroupQuota.
            <list type="bullet"><item><term>Request Path</term><description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/subscriptions/{subscriptionId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/resourceProviders/{resourceProviderName}/quotaAllocationRequests/{resourceName}</description></item><item><term>Operation Id</term><description>GroupQuotaSubscriptionAllocationRequest_CreateOrUpdate</description></item><item><term>Default Api Version</term><description>2023-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Quota.QuotaAllocationRequestStatusResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="subscriptionId" />, <paramref name="groupQuotaName" />, <paramref name="resourceProviderName" /> or <paramref name="resourceName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="subscriptionId" />, <paramref name="groupQuotaName" />, <paramref name="resourceProviderName" />, <paramref name="resourceName" /> or <paramref name="data" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetGroupQuotaEntities">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Quota.GroupQuotaEntityCollection GetGroupQuotaEntities ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Quota.GroupQuotaEntityCollection GetGroupQuotaEntities() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Quota.Mocking.MockableQuotaManagementGroupResource.GetGroupQuotaEntities" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGroupQuotaEntities () As GroupQuotaEntityCollection" />
      <MemberSignature Language="F#" Value="abstract member GetGroupQuotaEntities : unit -&gt; Azure.ResourceManager.Quota.GroupQuotaEntityCollection&#xA;override this.GetGroupQuotaEntities : unit -&gt; Azure.ResourceManager.Quota.GroupQuotaEntityCollection" Usage="mockableQuotaManagementGroupResource.GetGroupQuotaEntities " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Quota</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Quota.GroupQuotaEntityCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of GroupQuotaEntityResources in the ManagementGroupResource. </summary>
        <returns> An object representing collection of GroupQuotaEntityResources and their operations over a GroupQuotaEntityResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGroupQuotaEntity">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Quota.GroupQuotaEntityResource&gt; GetGroupQuotaEntity (string groupQuotaName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Quota.GroupQuotaEntityResource&gt; GetGroupQuotaEntity(string groupQuotaName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Quota.Mocking.MockableQuotaManagementGroupResource.GetGroupQuotaEntity(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGroupQuotaEntity (groupQuotaName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of GroupQuotaEntityResource)" />
      <MemberSignature Language="F#" Value="abstract member GetGroupQuotaEntity : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Quota.GroupQuotaEntityResource&gt;&#xA;override this.GetGroupQuotaEntity : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Quota.GroupQuotaEntityResource&gt;" Usage="mockableQuotaManagementGroupResource.GetGroupQuotaEntity (groupQuotaName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Quota</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Quota.GroupQuotaEntityResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="groupQuotaName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="groupQuotaName"> The GroupQuota name. The name should be unique for the provided context tenantId/MgId. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the GroupQuotas for the name passed. It will return the GroupQuotas properties only. The details on group quota can be access from the group quota APIs.
            <list type="bullet"><item><term>Request Path</term><description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}</description></item><item><term>Operation Id</term><description>GroupQuotas_Get</description></item><item><term>Default Api Version</term><description>2023-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Quota.GroupQuotaEntityResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="groupQuotaName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="groupQuotaName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetGroupQuotaEntityAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Quota.GroupQuotaEntityResource&gt;&gt; GetGroupQuotaEntityAsync (string groupQuotaName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Quota.GroupQuotaEntityResource&gt;&gt; GetGroupQuotaEntityAsync(string groupQuotaName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Quota.Mocking.MockableQuotaManagementGroupResource.GetGroupQuotaEntityAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGroupQuotaEntityAsync (groupQuotaName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of GroupQuotaEntityResource))" />
      <MemberSignature Language="F#" Value="abstract member GetGroupQuotaEntityAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Quota.GroupQuotaEntityResource&gt;&gt;&#xA;override this.GetGroupQuotaEntityAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Quota.GroupQuotaEntityResource&gt;&gt;" Usage="mockableQuotaManagementGroupResource.GetGroupQuotaEntityAsync (groupQuotaName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Quota</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Quota.GroupQuotaEntityResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="groupQuotaName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="groupQuotaName"> The GroupQuota name. The name should be unique for the provided context tenantId/MgId. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the GroupQuotas for the name passed. It will return the GroupQuotas properties only. The details on group quota can be access from the group quota APIs.
            <list type="bullet"><item><term>Request Path</term><description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}</description></item><item><term>Operation Id</term><description>GroupQuotas_Get</description></item><item><term>Default Api Version</term><description>2023-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Quota.GroupQuotaEntityResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="groupQuotaName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="groupQuotaName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetQuotaAllocationRequestStatus">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Quota.QuotaAllocationRequestStatusResource&gt; GetQuotaAllocationRequestStatus (string subscriptionId, string groupQuotaName, string allocationId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Quota.QuotaAllocationRequestStatusResource&gt; GetQuotaAllocationRequestStatus(string subscriptionId, string groupQuotaName, string allocationId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Quota.Mocking.MockableQuotaManagementGroupResource.GetQuotaAllocationRequestStatus(System.String,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetQuotaAllocationRequestStatus (subscriptionId As String, groupQuotaName As String, allocationId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of QuotaAllocationRequestStatusResource)" />
      <MemberSignature Language="F#" Value="abstract member GetQuotaAllocationRequestStatus : string * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Quota.QuotaAllocationRequestStatusResource&gt;&#xA;override this.GetQuotaAllocationRequestStatus : string * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Quota.QuotaAllocationRequestStatusResource&gt;" Usage="mockableQuotaManagementGroupResource.GetQuotaAllocationRequestStatus (subscriptionId, groupQuotaName, allocationId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Quota</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Quota.QuotaAllocationRequestStatusResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subscriptionId" Type="System.String" />
        <Parameter Name="groupQuotaName" Type="System.String" />
        <Parameter Name="allocationId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        <param name="groupQuotaName"> The GroupQuota name. The name should be unique for the provided context tenantId/MgId. </param>
        <param name="allocationId"> Request Id. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the quota allocation request status for the subscriptionId by allocationId.
            <list type="bullet"><item><term>Request Path</term><description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/subscriptions/{subscriptionId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/quotaAllocationRequests/{allocationId}</description></item><item><term>Operation Id</term><description>GroupQuotaSubscriptionAllocationRequest_Get</description></item><item><term>Default Api Version</term><description>2023-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Quota.QuotaAllocationRequestStatusResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="subscriptionId" />, <paramref name="groupQuotaName" /> or <paramref name="allocationId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="subscriptionId" />, <paramref name="groupQuotaName" /> or <paramref name="allocationId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetQuotaAllocationRequestStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Quota.QuotaAllocationRequestStatusResource&gt;&gt; GetQuotaAllocationRequestStatusAsync (string subscriptionId, string groupQuotaName, string allocationId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Quota.QuotaAllocationRequestStatusResource&gt;&gt; GetQuotaAllocationRequestStatusAsync(string subscriptionId, string groupQuotaName, string allocationId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Quota.Mocking.MockableQuotaManagementGroupResource.GetQuotaAllocationRequestStatusAsync(System.String,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetQuotaAllocationRequestStatusAsync (subscriptionId As String, groupQuotaName As String, allocationId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of QuotaAllocationRequestStatusResource))" />
      <MemberSignature Language="F#" Value="abstract member GetQuotaAllocationRequestStatusAsync : string * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Quota.QuotaAllocationRequestStatusResource&gt;&gt;&#xA;override this.GetQuotaAllocationRequestStatusAsync : string * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Quota.QuotaAllocationRequestStatusResource&gt;&gt;" Usage="mockableQuotaManagementGroupResource.GetQuotaAllocationRequestStatusAsync (subscriptionId, groupQuotaName, allocationId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Quota</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Quota.QuotaAllocationRequestStatusResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subscriptionId" Type="System.String" />
        <Parameter Name="groupQuotaName" Type="System.String" />
        <Parameter Name="allocationId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        <param name="groupQuotaName"> The GroupQuota name. The name should be unique for the provided context tenantId/MgId. </param>
        <param name="allocationId"> Request Id. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the quota allocation request status for the subscriptionId by allocationId.
            <list type="bullet"><item><term>Request Path</term><description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/subscriptions/{subscriptionId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/quotaAllocationRequests/{allocationId}</description></item><item><term>Operation Id</term><description>GroupQuotaSubscriptionAllocationRequest_Get</description></item><item><term>Default Api Version</term><description>2023-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Quota.QuotaAllocationRequestStatusResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="subscriptionId" />, <paramref name="groupQuotaName" /> or <paramref name="allocationId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="subscriptionId" />, <paramref name="groupQuotaName" /> or <paramref name="allocationId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetQuotaAllocationRequestStatuses">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Quota.QuotaAllocationRequestStatusCollection GetQuotaAllocationRequestStatuses ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Quota.QuotaAllocationRequestStatusCollection GetQuotaAllocationRequestStatuses() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Quota.Mocking.MockableQuotaManagementGroupResource.GetQuotaAllocationRequestStatuses" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetQuotaAllocationRequestStatuses () As QuotaAllocationRequestStatusCollection" />
      <MemberSignature Language="F#" Value="abstract member GetQuotaAllocationRequestStatuses : unit -&gt; Azure.ResourceManager.Quota.QuotaAllocationRequestStatusCollection&#xA;override this.GetQuotaAllocationRequestStatuses : unit -&gt; Azure.ResourceManager.Quota.QuotaAllocationRequestStatusCollection" Usage="mockableQuotaManagementGroupResource.GetQuotaAllocationRequestStatuses " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Quota</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Quota.QuotaAllocationRequestStatusCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of QuotaAllocationRequestStatusResources in the ManagementGroupResource. </summary>
        <returns> An object representing collection of QuotaAllocationRequestStatusResources and their operations over a QuotaAllocationRequestStatusResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetQuotaAllocationRequestStatusesByResourceProvider">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.Quota.QuotaAllocationRequestStatusResource&gt; GetQuotaAllocationRequestStatusesByResourceProvider (string subscriptionId, string groupQuotaName, string resourceProviderName, string filter, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.Quota.QuotaAllocationRequestStatusResource&gt; GetQuotaAllocationRequestStatusesByResourceProvider(string subscriptionId, string groupQuotaName, string resourceProviderName, string filter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Quota.Mocking.MockableQuotaManagementGroupResource.GetQuotaAllocationRequestStatusesByResourceProvider(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetQuotaAllocationRequestStatusesByResourceProvider (subscriptionId As String, groupQuotaName As String, resourceProviderName As String, filter As String, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of QuotaAllocationRequestStatusResource)" />
      <MemberSignature Language="F#" Value="abstract member GetQuotaAllocationRequestStatusesByResourceProvider : string * string * string * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Quota.QuotaAllocationRequestStatusResource&gt;&#xA;override this.GetQuotaAllocationRequestStatusesByResourceProvider : string * string * string * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Quota.QuotaAllocationRequestStatusResource&gt;" Usage="mockableQuotaManagementGroupResource.GetQuotaAllocationRequestStatusesByResourceProvider (subscriptionId, groupQuotaName, resourceProviderName, filter, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Quota</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.Quota.QuotaAllocationRequestStatusResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subscriptionId" Type="System.String" />
        <Parameter Name="groupQuotaName" Type="System.String" />
        <Parameter Name="resourceProviderName" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        <param name="groupQuotaName"> The GroupQuota name. The name should be unique for the provided context tenantId/MgId. </param>
        <param name="resourceProviderName"> The resource provider name, such as - Microsoft.Compute. Currently only Microsoft.Compute resource provider supports this API. </param>
        <param name="filter">
             | Field | Supported operators
             |---------------------|------------------------
            
              location eq {location}
              Example: $filter=location eq eastus
             </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
             Get all the quotaAllocationRequests for a resourceProvider/location. The filter paramter for location is required.
             <list type="bullet"><item><term>Request Path</term><description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/subscriptions/{subscriptionId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/resourceProviders/{resourceProviderName}/quotaAllocationRequests</description></item><item><term>Operation Id</term><description>GroupQuotaSubscriptionAllocationRequest_List</description></item><item><term>Default Api Version</term><description>2023-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Quota.QuotaAllocationRequestStatusResource" /></description></item></list></summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.Quota.QuotaAllocationRequestStatusResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="subscriptionId" />, <paramref name="groupQuotaName" /> or <paramref name="resourceProviderName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="subscriptionId" />, <paramref name="groupQuotaName" />, <paramref name="resourceProviderName" /> or <paramref name="filter" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetQuotaAllocationRequestStatusesByResourceProviderAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.Quota.QuotaAllocationRequestStatusResource&gt; GetQuotaAllocationRequestStatusesByResourceProviderAsync (string subscriptionId, string groupQuotaName, string resourceProviderName, string filter, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.Quota.QuotaAllocationRequestStatusResource&gt; GetQuotaAllocationRequestStatusesByResourceProviderAsync(string subscriptionId, string groupQuotaName, string resourceProviderName, string filter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Quota.Mocking.MockableQuotaManagementGroupResource.GetQuotaAllocationRequestStatusesByResourceProviderAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetQuotaAllocationRequestStatusesByResourceProviderAsync (subscriptionId As String, groupQuotaName As String, resourceProviderName As String, filter As String, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of QuotaAllocationRequestStatusResource)" />
      <MemberSignature Language="F#" Value="abstract member GetQuotaAllocationRequestStatusesByResourceProviderAsync : string * string * string * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Quota.QuotaAllocationRequestStatusResource&gt;&#xA;override this.GetQuotaAllocationRequestStatusesByResourceProviderAsync : string * string * string * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Quota.QuotaAllocationRequestStatusResource&gt;" Usage="mockableQuotaManagementGroupResource.GetQuotaAllocationRequestStatusesByResourceProviderAsync (subscriptionId, groupQuotaName, resourceProviderName, filter, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Quota</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.Quota.QuotaAllocationRequestStatusResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subscriptionId" Type="System.String" />
        <Parameter Name="groupQuotaName" Type="System.String" />
        <Parameter Name="resourceProviderName" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        <param name="groupQuotaName"> The GroupQuota name. The name should be unique for the provided context tenantId/MgId. </param>
        <param name="resourceProviderName"> The resource provider name, such as - Microsoft.Compute. Currently only Microsoft.Compute resource provider supports this API. </param>
        <param name="filter">
             | Field | Supported operators
             |---------------------|------------------------
            
              location eq {location}
              Example: $filter=location eq eastus
             </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
             Get all the quotaAllocationRequests for a resourceProvider/location. The filter paramter for location is required.
             <list type="bullet"><item><term>Request Path</term><description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/subscriptions/{subscriptionId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/resourceProviders/{resourceProviderName}/quotaAllocationRequests</description></item><item><term>Operation Id</term><description>GroupQuotaSubscriptionAllocationRequest_List</description></item><item><term>Default Api Version</term><description>2023-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Quota.QuotaAllocationRequestStatusResource" /></description></item></list></summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.Quota.QuotaAllocationRequestStatusResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="subscriptionId" />, <paramref name="groupQuotaName" /> or <paramref name="resourceProviderName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="subscriptionId" />, <paramref name="groupQuotaName" />, <paramref name="resourceProviderName" /> or <paramref name="filter" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSubscriptionQuotaAllocation">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Quota.SubscriptionQuotaAllocationResource&gt; GetSubscriptionQuotaAllocation (string subscriptionId, string groupQuotaName, string resourceName, string filter, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Quota.SubscriptionQuotaAllocationResource&gt; GetSubscriptionQuotaAllocation(string subscriptionId, string groupQuotaName, string resourceName, string filter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Quota.Mocking.MockableQuotaManagementGroupResource.GetSubscriptionQuotaAllocation(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSubscriptionQuotaAllocation (subscriptionId As String, groupQuotaName As String, resourceName As String, filter As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of SubscriptionQuotaAllocationResource)" />
      <MemberSignature Language="F#" Value="abstract member GetSubscriptionQuotaAllocation : string * string * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Quota.SubscriptionQuotaAllocationResource&gt;&#xA;override this.GetSubscriptionQuotaAllocation : string * string * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Quota.SubscriptionQuotaAllocationResource&gt;" Usage="mockableQuotaManagementGroupResource.GetSubscriptionQuotaAllocation (subscriptionId, groupQuotaName, resourceName, filter, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Quota</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Quota.SubscriptionQuotaAllocationResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subscriptionId" Type="System.String" />
        <Parameter Name="groupQuotaName" Type="System.String" />
        <Parameter Name="resourceName" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        <param name="groupQuotaName"> The GroupQuota name. The name should be unique for the provided context tenantId/MgId. </param>
        <param name="resourceName"> Resource name. </param>
        <param name="filter">
             | Field | Supported operators
             |---------------------|------------------------
            
              location eq {location}
              Example: $filter=location eq eastus
             </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
             Gets Quota allocated to a subscription for the specific Resource Provider, Location, ResourceName. This will include the GroupQuota and total quota allocated to the subscription. Only the Group quota allocated to the subscription can be allocated back to the MG Group Quota.
             <list type="bullet"><item><term>Request Path</term><description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/subscriptions/{subscriptionId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/quotaAllocations/{resourceName}</description></item><item><term>Operation Id</term><description>GroupQuotaSubscriptionAllocation_Get</description></item><item><term>Default Api Version</term><description>2023-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Quota.SubscriptionQuotaAllocationResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="subscriptionId" />, <paramref name="groupQuotaName" />, <paramref name="resourceName" /> or <paramref name="filter" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="subscriptionId" />, <paramref name="groupQuotaName" /> or <paramref name="resourceName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSubscriptionQuotaAllocationAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Quota.SubscriptionQuotaAllocationResource&gt;&gt; GetSubscriptionQuotaAllocationAsync (string subscriptionId, string groupQuotaName, string resourceName, string filter, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Quota.SubscriptionQuotaAllocationResource&gt;&gt; GetSubscriptionQuotaAllocationAsync(string subscriptionId, string groupQuotaName, string resourceName, string filter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Quota.Mocking.MockableQuotaManagementGroupResource.GetSubscriptionQuotaAllocationAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSubscriptionQuotaAllocationAsync (subscriptionId As String, groupQuotaName As String, resourceName As String, filter As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of SubscriptionQuotaAllocationResource))" />
      <MemberSignature Language="F#" Value="abstract member GetSubscriptionQuotaAllocationAsync : string * string * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Quota.SubscriptionQuotaAllocationResource&gt;&gt;&#xA;override this.GetSubscriptionQuotaAllocationAsync : string * string * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Quota.SubscriptionQuotaAllocationResource&gt;&gt;" Usage="mockableQuotaManagementGroupResource.GetSubscriptionQuotaAllocationAsync (subscriptionId, groupQuotaName, resourceName, filter, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Quota</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Quota.SubscriptionQuotaAllocationResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subscriptionId" Type="System.String" />
        <Parameter Name="groupQuotaName" Type="System.String" />
        <Parameter Name="resourceName" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        <param name="groupQuotaName"> The GroupQuota name. The name should be unique for the provided context tenantId/MgId. </param>
        <param name="resourceName"> Resource name. </param>
        <param name="filter">
             | Field | Supported operators
             |---------------------|------------------------
            
              location eq {location}
              Example: $filter=location eq eastus
             </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
             Gets Quota allocated to a subscription for the specific Resource Provider, Location, ResourceName. This will include the GroupQuota and total quota allocated to the subscription. Only the Group quota allocated to the subscription can be allocated back to the MG Group Quota.
             <list type="bullet"><item><term>Request Path</term><description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/subscriptions/{subscriptionId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/quotaAllocations/{resourceName}</description></item><item><term>Operation Id</term><description>GroupQuotaSubscriptionAllocation_Get</description></item><item><term>Default Api Version</term><description>2023-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Quota.SubscriptionQuotaAllocationResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="subscriptionId" />, <paramref name="groupQuotaName" />, <paramref name="resourceName" /> or <paramref name="filter" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="subscriptionId" />, <paramref name="groupQuotaName" /> or <paramref name="resourceName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSubscriptionQuotaAllocations">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Quota.SubscriptionQuotaAllocationCollection GetSubscriptionQuotaAllocations (string subscriptionId, string groupQuotaName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Quota.SubscriptionQuotaAllocationCollection GetSubscriptionQuotaAllocations(string subscriptionId, string groupQuotaName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Quota.Mocking.MockableQuotaManagementGroupResource.GetSubscriptionQuotaAllocations(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSubscriptionQuotaAllocations (subscriptionId As String, groupQuotaName As String) As SubscriptionQuotaAllocationCollection" />
      <MemberSignature Language="F#" Value="abstract member GetSubscriptionQuotaAllocations : string * string -&gt; Azure.ResourceManager.Quota.SubscriptionQuotaAllocationCollection&#xA;override this.GetSubscriptionQuotaAllocations : string * string -&gt; Azure.ResourceManager.Quota.SubscriptionQuotaAllocationCollection" Usage="mockableQuotaManagementGroupResource.GetSubscriptionQuotaAllocations (subscriptionId, groupQuotaName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Quota</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Quota.SubscriptionQuotaAllocationCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subscriptionId" Type="System.String" />
        <Parameter Name="groupQuotaName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        <param name="groupQuotaName"> The GroupQuota name. The name should be unique for the provided context tenantId/MgId. </param>
        <summary> Gets a collection of SubscriptionQuotaAllocationResources in the ManagementGroupResource. </summary>
        <returns> An object representing collection of SubscriptionQuotaAllocationResources and their operations over a SubscriptionQuotaAllocationResource. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="subscriptionId" /> or <paramref name="groupQuotaName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="subscriptionId" /> or <paramref name="groupQuotaName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateGroupQuotaSubscriptionAllocationRequest">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Quota.QuotaAllocationRequestStatusResource&gt; UpdateGroupQuotaSubscriptionAllocationRequest (Azure.WaitUntil waitUntil, string subscriptionId, string groupQuotaName, string resourceProviderName, string resourceName, Azure.ResourceManager.Quota.QuotaAllocationRequestStatusData data, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.Quota.QuotaAllocationRequestStatusResource&gt; UpdateGroupQuotaSubscriptionAllocationRequest(valuetype Azure.WaitUntil waitUntil, string subscriptionId, string groupQuotaName, string resourceProviderName, string resourceName, class Azure.ResourceManager.Quota.QuotaAllocationRequestStatusData data, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Quota.Mocking.MockableQuotaManagementGroupResource.UpdateGroupQuotaSubscriptionAllocationRequest(Azure.WaitUntil,System.String,System.String,System.String,System.String,Azure.ResourceManager.Quota.QuotaAllocationRequestStatusData,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateGroupQuotaSubscriptionAllocationRequest (waitUntil As WaitUntil, subscriptionId As String, groupQuotaName As String, resourceProviderName As String, resourceName As String, data As QuotaAllocationRequestStatusData, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation(Of QuotaAllocationRequestStatusResource)" />
      <MemberSignature Language="F#" Value="abstract member UpdateGroupQuotaSubscriptionAllocationRequest : Azure.WaitUntil * string * string * string * string * Azure.ResourceManager.Quota.QuotaAllocationRequestStatusData * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Quota.QuotaAllocationRequestStatusResource&gt;&#xA;override this.UpdateGroupQuotaSubscriptionAllocationRequest : Azure.WaitUntil * string * string * string * string * Azure.ResourceManager.Quota.QuotaAllocationRequestStatusData * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Quota.QuotaAllocationRequestStatusResource&gt;" Usage="mockableQuotaManagementGroupResource.UpdateGroupQuotaSubscriptionAllocationRequest (waitUntil, subscriptionId, groupQuotaName, resourceProviderName, resourceName, data, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Quota</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Quota.QuotaAllocationRequestStatusResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="subscriptionId" Type="System.String" />
        <Parameter Name="groupQuotaName" Type="System.String" />
        <Parameter Name="resourceProviderName" Type="System.String" />
        <Parameter Name="resourceName" Type="System.String" />
        <Parameter Name="data" Type="Azure.ResourceManager.Quota.QuotaAllocationRequestStatusData" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        <param name="groupQuotaName"> The GroupQuota name. The name should be unique for the provided context tenantId/MgId. </param>
        <param name="resourceProviderName"> The resource provider name, such as - Microsoft.Compute. Currently only Microsoft.Compute resource provider supports this API. </param>
        <param name="resourceName"> Resource name. </param>
        <param name="data"> Quota requests payload. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Request to assign quota from group quota to a specific Subscription. The assign GroupQuota to subscriptions or reduce the quota allocated to subscription to give back the unused quota ( quota &gt;= usages) to the groupQuota. So, this API can be used to assign Quota to subscriptions and assign back unused quota to group quota, which can be assigned to another subscriptions in the GroupQuota. User can collect unused quotas from multiple subscriptions within the groupQuota and assign the groupQuota to the subscription, where it's needed.
            <list type="bullet"><item><term>Request Path</term><description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/subscriptions/{subscriptionId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/resourceProviders/{resourceProviderName}/quotaAllocationRequests/{resourceName}</description></item><item><term>Operation Id</term><description>GroupQuotaSubscriptionAllocationRequest_Update</description></item><item><term>Default Api Version</term><description>2023-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Quota.QuotaAllocationRequestStatusResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="subscriptionId" />, <paramref name="groupQuotaName" />, <paramref name="resourceProviderName" /> or <paramref name="resourceName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="subscriptionId" />, <paramref name="groupQuotaName" />, <paramref name="resourceProviderName" />, <paramref name="resourceName" /> or <paramref name="data" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateGroupQuotaSubscriptionAllocationRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Quota.QuotaAllocationRequestStatusResource&gt;&gt; UpdateGroupQuotaSubscriptionAllocationRequestAsync (Azure.WaitUntil waitUntil, string subscriptionId, string groupQuotaName, string resourceProviderName, string resourceName, Azure.ResourceManager.Quota.QuotaAllocationRequestStatusData data, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.Quota.QuotaAllocationRequestStatusResource&gt;&gt; UpdateGroupQuotaSubscriptionAllocationRequestAsync(valuetype Azure.WaitUntil waitUntil, string subscriptionId, string groupQuotaName, string resourceProviderName, string resourceName, class Azure.ResourceManager.Quota.QuotaAllocationRequestStatusData data, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Quota.Mocking.MockableQuotaManagementGroupResource.UpdateGroupQuotaSubscriptionAllocationRequestAsync(Azure.WaitUntil,System.String,System.String,System.String,System.String,Azure.ResourceManager.Quota.QuotaAllocationRequestStatusData,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateGroupQuotaSubscriptionAllocationRequestAsync (waitUntil As WaitUntil, subscriptionId As String, groupQuotaName As String, resourceProviderName As String, resourceName As String, data As QuotaAllocationRequestStatusData, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation(Of QuotaAllocationRequestStatusResource))" />
      <MemberSignature Language="F#" Value="abstract member UpdateGroupQuotaSubscriptionAllocationRequestAsync : Azure.WaitUntil * string * string * string * string * Azure.ResourceManager.Quota.QuotaAllocationRequestStatusData * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Quota.QuotaAllocationRequestStatusResource&gt;&gt;&#xA;override this.UpdateGroupQuotaSubscriptionAllocationRequestAsync : Azure.WaitUntil * string * string * string * string * Azure.ResourceManager.Quota.QuotaAllocationRequestStatusData * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Quota.QuotaAllocationRequestStatusResource&gt;&gt;" Usage="mockableQuotaManagementGroupResource.UpdateGroupQuotaSubscriptionAllocationRequestAsync (waitUntil, subscriptionId, groupQuotaName, resourceProviderName, resourceName, data, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Quota</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Quota.QuotaAllocationRequestStatusResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="subscriptionId" Type="System.String" />
        <Parameter Name="groupQuotaName" Type="System.String" />
        <Parameter Name="resourceProviderName" Type="System.String" />
        <Parameter Name="resourceName" Type="System.String" />
        <Parameter Name="data" Type="Azure.ResourceManager.Quota.QuotaAllocationRequestStatusData" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        <param name="groupQuotaName"> The GroupQuota name. The name should be unique for the provided context tenantId/MgId. </param>
        <param name="resourceProviderName"> The resource provider name, such as - Microsoft.Compute. Currently only Microsoft.Compute resource provider supports this API. </param>
        <param name="resourceName"> Resource name. </param>
        <param name="data"> Quota requests payload. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Request to assign quota from group quota to a specific Subscription. The assign GroupQuota to subscriptions or reduce the quota allocated to subscription to give back the unused quota ( quota &gt;= usages) to the groupQuota. So, this API can be used to assign Quota to subscriptions and assign back unused quota to group quota, which can be assigned to another subscriptions in the GroupQuota. User can collect unused quotas from multiple subscriptions within the groupQuota and assign the groupQuota to the subscription, where it's needed.
            <list type="bullet"><item><term>Request Path</term><description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/subscriptions/{subscriptionId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/resourceProviders/{resourceProviderName}/quotaAllocationRequests/{resourceName}</description></item><item><term>Operation Id</term><description>GroupQuotaSubscriptionAllocationRequest_Update</description></item><item><term>Default Api Version</term><description>2023-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Quota.QuotaAllocationRequestStatusResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="subscriptionId" />, <paramref name="groupQuotaName" />, <paramref name="resourceProviderName" /> or <paramref name="resourceName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="subscriptionId" />, <paramref name="groupQuotaName" />, <paramref name="resourceProviderName" />, <paramref name="resourceName" /> or <paramref name="data" /> is null. </exception>
      </Docs>
    </Member>
  </Members>
</Type>
